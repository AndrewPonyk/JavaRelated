
1) What is Internatiolazation? 
	
	Def :	Internationalisation (I18N) is a means of adapting your application 
			to different languages to allow for regional differences. 
			Follow these steps to enable internationalisation in your application.
 
----------------------------------------------------------------------------------------------------------
2)	Why only UTF-8 encoding is using in Play ?
	Play supports only one encoding: UTF-8. 
		Since encoding problems can be weird and difficult to deal with, 
		we made the choice to support only one encoding. 
		UTF-8 allows you to display all characters for all languages.
	
		Be sure to be consistent with UTF-8 usage throughout your application:
			* Edit all your source files as UTF-8
			* Define proper encoding headers in HTTP
			* Set your HTML meta tags to UTF-8
			* If you use a database, configure it to use UTF-8, and always connect to it using UTF-8
			
		<b> Note </b>
			The UTF-8 encoding issue is the reason why most of the Play configuration files,
			even though they are Java properties files, are not named *.properties. 
			Java imposes the requirement that properties files must be 
			encoded with the ISO-8859-1 encoding. Play configuration files must be UTF-8 encoded.
			Need we say more ?
------------------------------------------------------------------------------------------------
3)	Externalize your messages
		To support I18N you have to externalize all messages in your application.
		
		Steps to support I18N
		* add supported languages to application.conf
			  application.langs=uk,en,de,ja
		* create files conf/messages , conf/messages.uk , conf/messages.de , conf/messages.ja with messages
			conf/messages.uk :
				welcome = Вітаємо !
				login = Логін
				password = Пароль
		* And now on we page you can write &{'welcome'} and Play1 will detect which language use
------------------------------------------------------------------------------------
4)	Define languages supported by the application
		On the first request from a new user, Play will guess the default language to use. 
		It does so by parsing the HTTP Accept-language header.
		It will then save the chosen language in a PLAY_LANG cookie.
		So the next request will use the same language.
		
		From your application code your can <b> retrieve the current language </b>
		for the user by accessing the play.i18n.Lang object:
			String lang = Lang.get();
		
		If you want to permanently change the user language, use the <b> change() </b> method:
			Lang.change("ja");
			
------------------------------------------------------------------------------------------
5)	Define date format according to your locale
	
	Sets the default date format, using a java.text.SimpleDateFormat pattern. For example:

	date.format=dd-MM-yyyy

	This property also affects how ${date.format()} renders dates in templates. It also set the default date format when binding a date parameter.

	Default: yyyy-MM-dd

	You can also set a different date format for <b> specific languages </b> 
	that you have configured with application.langs, for example:

	date.format.fr=dd-MM-yyyy
	date.fomat.de= MM-dd-yyyy
	
	<b>
	and now on the page 
	..
		${new Date().format()}
	..
	will display different for different languages
	</b>
-------------------------------------------------------------------------------------------
6)	Retrieve localized messages
	
	From the application code, you can retrieve messages defined in message files. From Java, use the play.i18n.Messages object.

		public static void hello() {
			renderText(Messages.get("hello"));
		}
	
	We support message formatting through the standard java.util.Formatter ‘Format string syntax’. 
	You can also define dynamic content in your messages:

		hello=Hello %s!
		where %s represents a message argument that will be output as a String. 
		Message arguments are provided by additional (varargs) arguments to Messages.get:

		public static void hello(String user) {
			renderText(Messages.get("hello", user));
		}
	
	Template output

	From a template you can use the special <b> &{…} </b> syntax to display localized messages:

	<h1>&{'hello'}</h1>
	or using dynamic content in message arguments:

	<h1>&{'hello', params.user}</h1>

--------------------------------------------------------------------------------------------
7) Multiple arguments

	You can define multiple message arguments, such as this message which refers 
	to two ‘decimal integer’ arguments:
	
		guess=Please pick a number between %d and %d
	which you display by specifying the message arguments in the right order:

	<p>&{'guess', low, high}</p>
	
	
	<b>Argument indices	</b>
	guess.characteristic=Devinez %2$s de %1$s.
	
	where %2$s outputs the second argument as a decimal integer.

	
	!!!!! Messages inside messages
	guess.characteristic=Devinez &{%2$s} de %1$s.
	person.age = l’age

	where <b> &{%s} </b> is itself a message look-up, with the argument value as the message key.