1) application.conf
	
	First off, the best way to specify production mode is to give a specific ID to your production framework.
	Let’s pick production as an example. Refer manage application.conf in several environments to see how.
	Set the framework in prod mode:
		#prod is id , you can use another id , important is only property 'application.mode'
		%prod.application.mode=prod     
	
	execute :
		play run --%prod
	<b>!!!
	In this mode, the framework will pre-compile all Java sources and templates.
	If an error is found at this step, the application will not start. 
	Source modifications will not be hot reloaded.
	</b>


	Define a real database:

	If you have used a development database (either db=mem or db=fs), you should configure a more robust database engine:
	%production.db.url=jdbc:mysql://localhost/prod
	%production.db.driver=com.mysql.jdbc.Driver
	%production.db.user=root
	%production.db.pass=1515312
	
	!!!!!!!!!
	Disable JPA automatic schema update:
	If you have used the automatic schema update feature provided by Hibernate, you should disable this feature for production. 

	For your production server, it’s usually a bad idea to let Hibernate automatically ALTER your production database’s schema and data…

	The initial deployment is potentially a different issue. In this case only specify:
	%production.jpa.ddl=create
	(create will on each application start create new schema , it is not good )
	(!!!!
	The options that I know about are
	jpa.ddl=update - This simply updates the tables when a model changes
	jpa.ddl=create-drop - This deletes the tables and recreates on model changes
	jpa.ddl=validate -Just checks the schema, but does not make any changes
	jpa.ddl=none - Does nothing
	You can read more about this on the Hibernate site under the first property autoGenerateSchema)



	
	Define a secure secret key:

	The Play secret key is used to secure cryptographic functions, like the session signature.
	Your application must keep this key very secret.
	%production.application.secret=c12d1c59af499d20f4955d07255ed8ea333

	You can use the play secret command to generate a new secure and random key (at least on a ‘real’ OS).
	If you plan to distribute your application to several servers, remember to use the same key for
	all application instances!
--------------------------------------------------------------------------
2)	Logging configuration


	For production it’s a good idea to use rolling log files.
	Do not send logging to the Console, since it will be written to the logs/system.out file and it will
	grow without bound!

	Create a custom log4j.properties in the conf/ directory:
	log4j.rootLogger=ERROR, Rolling
	 
	log4j.logger.play=INFO
	 
	# Rolling files
	log4j.appender.Rolling=org.apache.log4j.RollingFileAppender
	log4j.appender.Rolling.File=application.log
	log4j.appender.Rolling.MaxFileSize=1MB
	log4j.appender.Rolling.MaxBackupIndex=100
	log4j.appender.Rolling.layout=org.apache.log4j.PatternLayout
	log4j.appender.Rolling.layout.ConversionPattern=%d{ABSOLUTE} %-5p ~ %m%n

	

	The better idea is to using DAILY LOGS , look chapter 20_logging .
---------------------------------------------------------------------------
3)	Front-end HTTP server
	
	Set-up with Apache

	The example below shows a simple set-up with Apache httpd server running
	in front of a standard Play configuration.


	Create a proxy in apache (use mod_proxy.so)
	
		*install apache  in UBUNTU (sudo apt-get install apache2)
		* instal mod_proxy
			1. Install reverse_proxy module
			sudo apt-get install libapache2-mod-proxy-html

			2. Install libxml if it is not already installed.
			apt-get install libxml2-dev

			3. Load the modules in apache2.conf file
			LoadModule  proxy_module         /usr/lib/apache2/modules/mod_proxy.so
			LoadModule  proxy_http_module    /usr/lib/apache2/modules/mod_proxy_http.so
			LoadModule  headers_module       /usr/lib/apache2/modules/mod_headers.so
			LoadModule  deflate_module       /usr/lib/apache2/modules/mod_deflate.so
				
		* create virtual host in apache2.conf(in ubuntu it is in /etc/apache2 folder)
			<VirtualHost *:80>
			  ProxyPreserveHost On
			  ServerName www.loadbalancedapp.com
			  ProxyPass / http://localhost:9000/
			  ProxyPassReverse / http://localhost:9000/
			</VirtualHost>
		
	
	and now if we make request http://localhost it will 'redirect' to http://localhost:9000 =)



	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	Apache as a front proxy to allow transparent upgrade of your application
	The basic idea is to run <B>two</B> Play instances of your web application
	and let the front-end proxy load-balance them. In case one is not available,
	it will forward all the requests to the available one.

	Let’s start the same Play application two times: one on port 9999 and one on port 9998.

	Make a copy of the application and edit the application.conf in the conf directory to change the port numbers.

	For each web application directory:
	play start mysuperwebapp
	



	In apache2.conf :
	LoadModule proxy_ajp_module 	 /usr/lib/apache2/modules/mod_proxy_ajp.so
	LoadModule proxy_balancer_module /usr/lib/apache2/modules/mod_proxy_balancer.so

	<VirtualHost *:80>
	  ServerName localhost
	  <Location /balancer-manager>
	    SetHandler balancer-manager
	    Order Deny,Allow
	    Deny from all
	    Allow from all
	  </Location>
	  <Proxy balancer://mycluster>
	    BalancerMember http://localhost:9000
	    BalancerMember http://localhost:9001
	    #Hot Standby
	    #BalancerMember http://localhost:9001 status=+H 

	  </Proxy>
	  <Proxy *>
	    Order Allow,Deny
	    Allow From All
	  </Proxy>
	  ProxyPreserveHost On
	  ProxyPass /balancer-manager !
	  ProxyPass / balancer://mycluster/
	  ProxyPassReverse / http://localhost:9000/
	  ProxyPassReverse / http://localhost:9001/
	</VirtualHost>
	

	The important part is balancer://mycluster. This declares a load balancer.
	The +H option means that the second Play application is on stand-by(so second instance will
	be requested , only if first is unavailable).
	But you can also instruct it to load-balance.

	!!!!
	Every time you want to <B>upgrade</B> mysuperwebapp, here is what you need to do:
	play stop mysuperwebapp1

	The load-balancer then forwards everything to mysuperwebapp2. In the meantime update mysuperwebapp1. Once you are done:
	play start mysuperwebapp1

	You can now safely update mysuperwebapp2.

	Apache also provides a way to view the status of your cluster. Simply point your
	browser to '/balancer-manager' !!!! to view the current status of your clusters.




	!!!!!
	Advanced proxy settings

	When using an HTTP frontal server, request addresses are seen as coming from the HTTP server.
	In a usual set-up, where you both have the Play app and the proxy running on the same machine,
	the Play app will see the requests coming from 127.0.0.1.

	Proxy servers can add a specific header to the request to tell the proxied 
	application where the request came from. Most web servers will add an <B>x-forwarded-server</B> header  !!!!(get incoming IP)
	with the remote client IP address as first argument. If you enable the forward support in the
	XForwardedSupport configuration, Play will change the request.remoteAddress from the proxy’s 
	IP to the client’s IP. You have to list the IP addresses of your proxy servers for this to work.
	

	However, the host header is untouched, it’ll remain issued by the proxy.
	If you use Apache 2.x, you can add a directive like: 
		ProxyPreserveHost on

	The host: header will be the original host request header issued by the client.
	By combining theses two techniques, your app will appear to be directly exposed.
----------------------------------------------------------------------------------
4) HTTPS configuration
	The built-in server supports the HTTPS protocol, which you can use it in production.
	It supports certificate management, either via the classical Java keystore or simple cert and key files.
	To start an HTTPS connector for your application, just declare the https.port configuration property in your application.conf file:
		http.port=9000
		https.port=9443


	 to put your certificates in the 'conf' directory. Play supports <B>X509 certificates</B> and <B>keystore certificates</B>.
	 *The X509 certificates must be named as follows:host.cert for the certificate and host.key for the key. 
	 *If you are using keystore, then, by default it should be named certificate.jks.

	
	EXAMPLE : x509 certificates  !!!!!!!!!!!!
	* application.conf		
		# X509 certificates
		certificate.key.file=conf/host.key
		certificate.file=conf/host.cert
		# In case your key file is password protected
		certificate.password=secret
		trustmanager.algorithm=JKS
	* generating key and certificate
		openssl genrsa 1024 > host.key
		openssl req -new -x509 -nodes -sha1 -days 365 -key host.key > host.cert
		(second command will ask some questions , important is name of host , you need to provide your application host)	
	* To add site to trusted in browser(i used chrome ) 
		-Settings
		-Manage certificates
		-Authorities -> import (and add host.cert)	
		- Restart browser 
		-and your site is in https =)



	SSL principle : you need to have some third-part verifier (like facebook.com use http://www.verisign.com/ ) or manually add certificate 	to browser .
-------------------------------------------------------------------------------------------------------------------------------------
5) Deploying Without Python
	

	Python is installed by default on most Unix machines, and a Windows version is embedded with Play.
	However there may be cases where you need to deploy an application on a server without any Python executable.

	For that, a build.xml file providing limited functionalities is provided with Play applications.

	From the application folder, you can start the server using:
		ant start -Dplay.path=/path/to/playdirectory

	To stop the server:
		ant stop -Dplay.path=/path/to/playdirectory
