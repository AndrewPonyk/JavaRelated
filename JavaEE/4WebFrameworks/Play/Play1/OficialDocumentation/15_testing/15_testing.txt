1)	Few words about testing in Play1
	Creating automatic test suites for your application is a good way 
	to make it robust. It allows you to work in a very agile way.

	Play tests are built using JUnit 4 or Selenium depending what you want to test.

	Writing tests
	The tests must be created in the test/ directory.
	This folder will only be added to the sources path when the application is run in test mode. 
	You can write 3 different kinds of tests:
	 * Junit
	 * Functional(which are also Junit)
	 * Selenium
	

	
----------------------------------------------------------------------------------
2) Unit testing
	Unit test
	A unit test is written using JUnit. 
	In this kind of test you can test the model of your application (including some utilities).

	Here is an example of a Unit test:
	
	import play.test.*;
	import org.junit.*;
	 
	public class MyTest extends UnitTest {
	     
	    @Test
	    public void aTest() {
		assertEquals(2, 1 + 1); // A really important thing to test
	    }
	 
	    @Test
	    public void testUsers() {
		assertEquals(3, Users.count()); 
	    }
	}
	
	There are a lot of junit annotations , and methods (need to consider this topic in details )

	<b>Tip</b>
	<b>Integration testing<b>  is the phase in software testing in which individual
	software modules are combined and tested as a group. 
	It occurs after <b>unit testing</b> and before <b>validation testing</b>. 
	Integration testing takes as its input modules that have been unit
	tested, groups them in larger aggregates, applies tests defined in an 
	integration test plan to those aggregates, and delivers as its 
	output the integrated system ready for system testing.
------------------------------------------------------------------------------------------
3) Functional testing
	A functional test is written using JUnit.
	In this kind of test you can test your application 
	by accessing <b>directly</b> the controller objects.

	Here is an example of a Functional test:	
	
	import play.test.*;
	import play.mvc.*;
	import play.mvc.Http.*;
	import org.junit.*;
	 
	public class ApplicationTest extends FunctionalTest {
	     
	    @Test
	    public void testTheHomePage() {
		Response response = GET("/");
		assertStatus(200, response);
	    }    
	}
	

	Using the renderArgs() method, you can also get direct access 
	to the arguments passed to the view, instead of having 
	to make assertions about the response itself. For example:

	@Test
	public void testUserIsFoundAndPassedToView() {
	    Response response = POST("/user/find?name=mark&dob=18011977");
	    assertThat(renderArgs("user"), is(notNullValue()));
	    User user = (User) renderArgs("user");
	    assertThat(user.name, is("mark"));
	}
	
-------------------------------------------------------------------------------------------
4) Selenium tests some words ?
	
	Acceptance tests are written using Selenium. 
	Here you can test your application by running it in an automated browser.
	
	Selenium tests are written using HTML tables. 
	You can either use this native syntax or use the #{selenium /} tag.

	Here is an example of a Selenium test:

	#{selenium 'Test security'}
	 
	    // Try to log in the administration area
	    clearSession()
	    open('/admin')
	    assertTextPresent('Login')
	    type('login', 'admin')
	    type('password', 'secret')
	    clickAndWait('signin')
	 
	    // Verify that the user in correctly logged in
	    assertText('success', 'Welcom admin!')
	 
	#{/selenium}	

	my example (Login.test.html)
		#{selenium}
			clearSession()
			open('/')
			type('login','dev')
			type('password','dev')
			clickAndWait('submit')

			<!-- test if element with id='info' with some text is on the page -->
			<!-- another way to get element is xpath assertText('xpath=//div[@id="info"]','OK, you are autorized as dev') -->
			assertText('info','OK, you are autorized as dev')
	
	
			<!-- just test if text 'OK' is on the page -->
			assertTextPresent('OK')  
		#{/selenium}
---------------------------------------------------------------------------------------------------
5) Selenium tests using Java (using HtmlUnitDriver and FirefoxDriver) ?
	
	We can write selenium tests using Java !!! (Using HtmlUnitDriver - console mode,
	and  with FirefoxDrive - we can see what selenium test do in browser )
	
	! We need Firefox browser and library (i used selenium-2.39.0.zip add all jars to classpath)
	
	
	Here is example  : we load google page type 'wiki' in query field , and click on first finded result =)
	
		package selenium;
		import org.openqa.selenium.*;
		import org.openqa.selenium.firefox.FirefoxDriver;
		import org.openqa.selenium.htmlunit.HtmlUnitDriver;

		public class Selenium {
			public static void main(String[] args) {
				//testUsingHtmlUnit();
				testUsingFirefox();    
			}
			
			// test in console mode
			public static void testUsingHtmlUnit(){
				WebDriver driver = new HtmlUnitDriver();
				
				driver.get("http://www.google.com");
				
				WebElement query = driver.findElement(By.name("q"));
				query.sendKeys("wiki");
				driver.findElement(By.name("btnG")).click();
				
				try {
					Thread.sleep(4500);  // wait until javascript runs, (there are better ways to make pause =))

				} catch (InterruptedException ex) {
					System.err.println("thread error");
				}
				
				WebElement firstFindedLink = driver.findElements(By.cssSelector("h3.r a")).get(0);
				
				int r = driver.findElements(By.cssSelector("h3.r a")).size();
				for(int i=0;i <1000;i++){
					System.out.println(r); // should be 10 , because google show 10 results per page
				}
				
				firstFindedLink.click();
				
				System.err.println(driver.getPageSource());
			}
			
			//test in visual mode !!!
			public static void testUsingFirefox(){
				org.openqa.selenium.firefox.FirefoxDriver firefox = new FirefoxDriver();
				
				firefox.get("http://www.google.com");
				
				WebElement query = firefox.findElement(By.name("q"));
				query.sendKeys("wiki");
				firefox.findElement(By.name("btnG")).click();
				try {
					Thread.sleep(4500);

				} catch (InterruptedException ex) {
					System.err.println("thread error");
				}
				
				WebElement firstFindedLink = firefox.findElements(By.cssSelector("h3.r a")).get(8);
				
				int r = firefox.findElements(By.cssSelector("h3.r a")).size();
				for(int i=0;i <1000;i++){
					System.out.println(r); // should be 10 , because google show 10 results per page
				}
				
				firstFindedLink.click();
				
				System.err.println(firefox.getPageSource());
			}
		}
	
---------------------------------------------------------------------------------------------------
6)	Fixtures
	When you run tests, you need to have stable data for your application.
	The simplest way is to reset your database before each test.

	The play.test.Fixtures class helps you to manipulate your database and to 
	inject test data. You typically use it in a @Before method of a JUnit test.

	@Before
	public void setUp() {
	    Fixtures.deleteDatabase();
	}	

	To import data, it is simpler to define them in a YAML file that
	the Fixtures helper can automatically import.

	# Test data
	 
	Company(google):
	   name:    Google
	 
	Company(zen):
	   name:    Zenexity
	 
	User(guillaume):
	   name:    guillaume
	   company: zen
	And then:

	@Before
	public void setUp() {
	    Fixtures.deleteDatabase();
	    Fixtures.loadModels("data.yml");
	}

	For Selenium tests, you can use the #{fixture /} tag:

	#{fixture delete:'all', load:'data.yml' /}	 
	#{selenium}
	    // Write your test here
	#{/selenium}

	Sometimes it is convenient to split data into several YAML files. 
	You can load fixtures from multiple files at once:

	Fixtures.loadModels("users.yml", "roles.yml", "permissions.yml");
	and for Selenium tests:
	#{fixture delete:'all', load:['users.yml', 'roles.yml', 'permissions.yml'] /}
------------------------------------------------------------------------------------------------
7)	Running the tests
	
	To run the tests, you must run your application in test mode using the play test command.

	 play test 


	When you run a test, the result is saved into the /test-result 
	directory of your application.

	On the test runner page, each test is a link. 
	You can ‘right click’ and ‘Open in a new tab’, 
	to run the test directly outside of the test-runner.

	When you run tests this way, Play will start with a special 
	test framework ID. So you can define special configurations 
	in the application.conf file.

	If you want several different test configurations, you can 
	use framework IDs matching the pattern test-?.* (e.g: test-special).

	If you use a framework ID other then the default test,
	you must make sure ALL test configuration in application.conf 
	is available with that framework ID. When launching test with special
	test framework ID you do it like this: play test --%test-your-special-id

	For example:

	%test.db=mem
	%test.jpa.ddl=create-drop
	
-------------------------------------------------------------------------------------------------------
8)	Continuous integration, and running the tests automatically

	The auto-test command does the same as the test command, but it automatically 
	launches a browser, runs all the tests, and stops.

	This is a useful command if you want to set up a continuous integration system;
	
	
	So setting up a continuous integration system to test your application, could be:

	Checkout the latest version of your application
	Run play auto-test
	Wait for the end of the process
	Check for the marker file result.passed or result.failed in the /test-result directory
	Run these steps in a CRON tab, and you’re done!


	You can change the web browser compatibility mode used by the headless
	browser by configuring headlessBrowser.
