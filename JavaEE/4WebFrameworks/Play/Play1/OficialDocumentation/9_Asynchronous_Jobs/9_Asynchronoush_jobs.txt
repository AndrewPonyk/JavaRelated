1) Two words about Play1 asynchronous jobs

		Because Play is a web application framework, most of the application logic is done by controllers responding to HTTP requests. 

		But sometimes you will need to execute some application logic outside of any HTTP request. 
		It can be useful for initialization tasks, maintenance tasks or to run long tasks without blocking the HTTP request execution pool.

		Jobs are fully managed by the framework. 
		That means that Play will manage all the database connection stuff, JPA entity manager synchronization and transactions management for you.
		 To create a job you just need to extend the <b> play.jobs.Job </b> super class.
		 
		Example:
			package jobs;
	 
			import play.jobs.*;
			 
			public class MyJob extends Job {
				
				public void doJob() {
					// execute some application logic here ...
				}	
			} 
			
			
		Sometimes you need to create jobs that return a result. You then override the doJobWithResult() method.
			package jobs;
			 
			import play.jobs.*;
			  
			public class MyJob extends Job<String> {
				
				public String doJobWithResult() {
					// execute some application logic here ...
					return result;
				}
				
			}
---------------------------------------------------------------------------------------------------------

2)	Bootstrap jobs 

	'Bootstrap' means - 'начальна€ загрузка'
	
		Bootstrap jobs are executed by Play at application start time. 
		To mark your job as a bootstrap job you just need to add the <b> @OnApplicationStart </b> annotation.
		
		Example 
			import play.jobs.*;
 
			@OnApplicationStart
			public class Bootstrap extends Job {
				
				public void doJob() {
					if(Page.count() == 0) {
						new Page("root").save();
						Logger.info("A root page has been created.");
					}
				}
			}
			
	! Interesting thing : <b> For example we have two classes with @OnApplicationStart , then they are executed in ALPHABETICAL order</b>
	
		If you want your jobs to start when your application starts, but you want to start processing incoming requests immediately, 
		you can annotate your job like this: @OnApplicationStart(async=true). 
		Then your job will be started in the background when the application starts. All async jobs will be started at the same time.
		
		<b>
			Warning

			When you run the application in DEV mode, the application waits for the first HTTP request to start. 
			Moreover when you are in DEV mode, the application will sometimes automatically restart when needed. 

			When you run in PROD mode, the application will start synchronously with the server start.
		</b>
-------------------------------------------------------------------------------------------------------------------------------------

3)	Scheduled jobs 
			
			<b>@Every</b> - annotation
			
			
		@Every("1h")
		public class Bootstrap extends Job {
    
			public void doJob() {
				List<User> newUsers = User.find("newAccount = true").fetch();
				for(User user : newUsers) {
					Notifier.sayWelcome(user);
				}
			}
		}
		
		/*
			The above annotation is for hours, if you want to specify the time duration in minutes or seconds, you can do it in the following way:-
			i) For Minutes - @Every(У3mnФ),@Every(У30mnФ)
			ii) For Seconds - @Every(У35sФ),@Every(У56sФ)
		*/
		
		
		Example 2 :
			import play.jobs.*;
 
			/** Fire at 12pm (noon) every day **/ 
			@On("0 0 12 * * ?")
			public class Bootstrap extends Job {
				
				public void doJob() {
					Logger.info("Maintenance job ...");
					...
				}
			}
			
---------------------------------------------------------------------------------------------------
4)	Triggering task jobs and Stopping the application 

		You can also trigger a Job at any time to perform a specific task by simply calling now() on a Job instance. Then this job will be run immediately in a non blocking way. 
		public static void encodeVideo(Long videoId) {
			new VideoEncoder(videoId).now();
			renderText("Encoding started");
		}

		Stopping the application

		Because you sometimes need to perform some action before the application shutdown, Play also provides a @OnApplicationStop annotation.
		import play.jobs.*;
		 
			@OnApplicationStop
			public class Bootstrap extends Job {
			 
				public void doJob() {
					Fixture.deleteAll();
				}
			}
		
		
		