1) Use a cache . A few words about cache .

	To create high-performance systems, sometimes you need to cache data. 
	Play has a cache library and will use Memcached when used in a distributed environment.
	
	If you don’t configure Memcached, Play will use a standalone cache that stores data
	in the JVM heap. Caching data in the JVM application breaks the ‘share nothing’ 
	assumption made by Play: you can’t run your application on several servers, 
	and expect the application to behave consistently. 
	Each application instance will have a different copy of the data.

	It is important to understand that the cache contract is clear:
	when you put data in a cache, you can’t expect that data to 
	remain there forever. In fact you shouldn’t. A cache is fast,
	but values expire, and the cache generally exists only in memory
	(without persistent backup).
	
	<b> So the best way to use the cache is to repopulate it when it doesn’t have what you expect: </b>

	public static void allProducts() {
		List<Product> products = Cache.get("products", List.class);
		if(products == null) {
			products = Product.findAll();
			Cache.set("products", products, "30mn");
		}
		render(products);
	}
	
	
	or simple example 
	 public static void index() {

    	String val=Cache.get("someObject",String.class);
    	if(val==null){
    		Cache.set("someObject", "valueOfSomeObject","180s");
			val=Cache.get("someObject",String.class);
    		System.out.println("%%%%%%%%%%%%%%%%"+val);
    	}    
    	render(val);
    }
	
	
	!!!! I dont understand 
		* i wrote 
			public static void index() {
				Cache.set("someObject", "valueOfSomeObject","180s");
				String val=Cache.get("someObject",String.class);
				render(val);
			}	
			
			on the page just display value
			${val}
		*make a request http://localhost:9000
		
		* then comment this line  ( i expect that value was saved with 180 seconds expiration) (and it was mistake , dont change the code when app IS RUNNING =))
			    	String val=Cache.get("someObject",String.class);
		* make a request 
		* And  i have null 
		
		WHHHHY  null (i wanted 180 second )?
		
-------------------------------------------------------------
2) Delete data from Cache
	
		public static void deleteProduct(String id) {
			Product product = Product.findById(id);
			product.delete();
			Cache.delete("product_" + id);
			allProducts(); // some method =)
		}
		
		Some methods start with the safe prefix – e.g.<b> safeDelete, safeSet </b>.
		The standard methods are non-blocking. That means that when you issue the call:
		
		Cache.delete("product_" + id);

		The delete method will return immediately and will not wait until 
		the cached object is actually deleted. 
		So if an error occurs – e.g. an IO error – the object may still be present.
		
		This method (safeDelete) is blocking and returns a boolean value indicating 
		whether the object has been deleted or not. So the <b>full pattern</b>
		that ensures an item is deleted from the cache is:

			if(!Cache.safeDelete("product_" + id)) {
				throw new Exception("Oops, the product has not been removed from the cache");
			}
			...
		
		Note that those being blocking calls, safe methods will <b>slow down your application</b>.
		So use them only when needed.
----------------------------------------------------------------------------------------
3)	Cache API , few words 

	The cache API is provided by the <b> play.cache.Cache </b> class.
	This class contains the set of methods to set, replace, and get data from the cache.
	Refer to the Memcached documentation to understand the exact behavior of each method.
	
	
	Cache.get , Cache.set , Cache.delete 
	Cache.safeSet , Cache.safeDelete
	
	also there are useful methods : Cache.replace , Cache.clear , Cache.stop - stop the cache system 
	and some other methods .
---------------------------------------------------------------------------------------------
4)	Don’t use the Session as a cache! (Why ? )

	Answer :
		If you come from a framework that uses an in-memory Session implementation,
		you may be frustrated to see that Play allows only
		a small set of String data to be saved in the HTTP Session.
		But this is much better because a session is 
		not the place to cache your application data!
		
		
		So if you have been accustomed to doing things similar to:

		httpServletRequest.getSession().put("userProducts", products);
		...
		// and then in subsequent requests
		products = (List<Product>)httpServletRequest.getSession().get("userProducts");

		In Play1 you achieve the <b>same effect a little differently</b>. We think it’s a better approach:

		Cache.set(session.getId(), products);
		...
		// and then in subsequent requests
		List<Product> products = Cache.get(session.getId(), List.class)
		
-----------------------------------------------------------------------------------------
5)	Configure memcached (consider in details !!! )
 
	When you want to enable a real Memcached implementation,
	enable Memcached with the memcached configuration and define 
	the daemon address in the memcached.host configuration.
