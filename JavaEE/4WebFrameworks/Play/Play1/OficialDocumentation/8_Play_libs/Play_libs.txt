1) 	Play libs list 
	
	Most of these libraries are simple helpers that are really straightforward to use:

    Codec: Utilities to encode and decode data.
    Crypto: Cryptographics utilities.
    Expression: Evaluate dynamic expressions.
    F: Functional programming with Java.
    Files: File system manipulation helpers.
    I18N: Internationalization helpers.
    IO: Stream manipulation helpers.
    Images: Image manipulation utilities.
    Mail: E-mail functions.
    MimeTypes: Dealing with MIME types.
    OAuth: OAuth client protocol.
    OAuth2: OAuth2 client protocol.
    OpenID: OpenID client protocol.
    Time: Time and duration utilities.
    WS: Powerful Web Service client.
    XML: Loading XML structures.
    XPath: Parsing XML using XPath.

---------------------------------------------------------------------------
2) 	Parsing XML using XPath (in Play1)

	XPath is probably the easiest way to parse an XML document without having to use code generation tools.
	The play.libs.XPath library offers all the needed primitives to efficiently achieve this task.

	!!! Play1 getting Application root  :   <b> Play.applicationPath.toString() </b>
	
	So we will read file doc.xml in application root folder 
		* create file doc.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<events>
				<event id="1">
				</event>
				<event id="2">
				</event>
				<event id="3">
				</event>
			</events>
			
		* in controller
				public static void readXMLWithXPath() throws SAXException, IOException, ParserConfigurationException{
				
				File fXmlFile = new File(Play.applicationPath.toString()+"/"+"doc.xml");
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.parse(fXmlFile);
					
				for(Node event: XPath.selectNodes("events//event", doc)) {
					  String id = XPath.selectText("@id", event);
					
					  System.out.println(id); //display id 
				}
				
					renderArgs.put("ApplicationPath", Play.applicationPath.toString());
					render();
				}

				
	P.S  Class <b>play.libs.XPath</b> : http://www.playframework.com/documentation/1.2.7/api/index.html
-------------------------------------------------------------------------------------------------
3)		Web Service client
		
		The play.libs.WS provides a powerful HTTP client. Under the hood it uses Async HTTP client.
		
		HttpResponse res = WS.url("http://www.google.com").get();
		
		Example :
		Getting google.com content
		 * in Application.java
			
				HttpResponse res = WS.url("http://www.google.com").get();
		
				renderArgs.put("googleContent", res.getString());
				
		
		
		You can also use the async API to make HTTP requests in a non-blocking way. Then you will receive a Promise<HttpResponse>. Once redeemed, you can use the HttpResponse as usual:
			Promise<HttpResponse> futureResponse = WS.url(
				"http://www.google.com"
			).getAsync();

--------------------------------------------------------------------------------------------------------------------
4) 		Functional programming with Java

		The play.libs.F library provide several useful constructs coming from functional programming. These constructs are used to handle complex abstraction cases. For those that are accustomed to functional programming we provide:
			
			Option<T> (a T value that can be or not set)
			
			Either<A,B> (contains either a A value or a B value)
			
			Tuple<A,B> (contains both A and B values)
			
			<b>
				When you write a function that may not return a result in some cases (e.g. a find method), a common (bad) Java pattern is to return null when there is no result. 
				This practice is dangerous because the function return type does not clearly shows that it may not return an object 
				and it has been recognized by the nullable references inventor to be a “billion-dollar mistake”.
			</b>
			
			
			Example :
				public Option<Double> div(double a, double b) {
					if (b == 0)
						return None();
					else
						return Some(a / b);
				}
				
				Here is a way to use this function:
				Option<Double> q = div(42, 5);
				if (q.isDefined()) {
					Logger.info("q = %s", q.get()); // "q = 8.4"
				}

				But there is a more convenient syntax to use it, leveraging the fact that Option<T> implements Iterable<T>:
				for (double q : div(42, 5)) {
					Logger.info("q = %s", q); // "q = 8.4"
				}
				
				
				
				Example2:
				
					Tuple<A, B>

					The handy Tuple<A, B> class wraps two objects of type A and B. You can retrieve the objects using the _1 and _2 fields, respectively. For example:
					public Option<Tuple<String, String>> parseEmail(String email) {
						final Matcher matcher = Pattern.compile("(\\w+)@(\\w+)").matcher(email);
						if (matcher.matches()) {
							return Some(Tuple(matcher.group(1), matcher.group(2)));
						}
						return None();
					}

					Then:
					for (Tuple<String, String> email : parseEmail("foo@bar.com")) {
						Logger.info("name = %s", email._1); // "name = foo"
						Logger.info("server = %s", email._2); // "server = bar.com"
					}

					The T2<A, B> class is an alias for Tuple<A, B>. To handle tuples of 3 elements use the T3<A, B, C> class, and so on up to T5<A, B, C, D, E>.
					
					
				Example 3 :
					Pattern Matching

					Sometimes we feel that we need pattern matching in Java. Unfortunately Java does not have built-in pattern matching, 
					and because of the lack of functional constructs, it is difficult to add it as a library. 
					Anyway we’ve worked on a solution that is not so bad.
										
					The standard way would be:
						Object o = anything();
						 
						if(o instanceof String && ((String)o).startsWith("command:")) {
							String s = (String)o;
							System.out.println(s.toUpperCase());
						}

						Using the Play pattern matching library, you can write it as:
						for(String s: String.and(StartsWith("command:")).match(o)) {
							System.out.println(s.toUpperCase());
						}
						
-----------------------------------------------------------------------------------------------
5)	OAuth	(dont study how to implement it , cause i will use Play 1 and OAuth only if i study OAuth)

		OAuth is an open protocol for secure API authorization, using a simple and standard approach, from desktop and web applications.

			Two different specifications exist: OAuth 1.0 and OAuth 2.0. Play provides libraries to connect as a consumer to services proposing either of these specifications.

			The general process is the following:
			>
			Redirect the user to the provider’s authorization page
			>
			After the user grants authorization, he is redirected back to your server along with an unauthorized token
			>
			Your server exchanges the unauthorized token with an access token specific to the current user, that needs to be saved in order to perform requests to the service. This step is done as server-to-server communication.

			The Play framework takes care of most of the process.
------------------------------------------------------------------------
6) OpenID - need learn something about openid , in this documentation only few words )