1)	Using jQuery with the jsAction tag
	
	<b>
		The Play framework allows you to easily perform Ajax requests, and is shipped with jQuery by default.
	</b>

	The #{jsAction /} tag returns a <b> JavaScript function </b> which constructs 
	a URL based on a server action and free variables. 
	It does not perform an AJAX request; these have to be done by hand using the returned URL.
	
	Example : 'getting info about phones using ajax'

		routes:
			# Routes
			GET 	/devices	Application.devices

		Application.java
			public static void devices(Integer id){
				id-- ; //numeration from zero
				//create 'Model' =)
				List<String>  devices=new ArrayList<String>();
				devices.add("1,Sony,Sony k550i");
				devices.add("2,HTC,HTC WildFire");
				devices.add("3,Samsung,Samsung Galaxy");
		
				//get data
				HashMap<String, String> result=new HashMap<String, String>();
				if(id!=null && devices.size()>id && id>-1){
					result.put("id", devices.get(id).split(",")[0]);
					result.put("name", devices.get(id).split(",")[1]);
					result.put("details", devices.get(id).split(",")[2]);
				}else{
					result.put("id", "wrong id");
					result.put("name", "wrong id");
					result.put("details", "wrong id");
				}
	
				renderTemplate("Application/devices.xml",result);
			}
			...

		index.html
			#{extends 'main.html' /}
			#{set title:'Ajax in Play1' /}


			<h3> Using #&#123;jsAction}  to construct URL</h3>
			<p><i>Here we load devices using AJAX and jQuery <b>load</b> method</i></p>
			<div style="border :1 px solid gray; margin:10px; width:700px">
				<input type="text"  name="id" />
				<a href='' id="load">Load device by id</a>		
				<div id="result" style="border: 1px solid aqua">
				</div>
			</div>	
			<hr>

			<p><i>Here we load devices using AJAX and jQuery <b>$.get</b> method</i> and then 
				parse xml
			</p>
			<div style="border :1 px solid gray; margin:10px; width:700px">
				<input type="text"  name="id" id="deviceId" />
				<a href='' id="get">Get device by id</a>
				
				<div id="parsedXML" style="border: 1px solid aqua">
				</div>
			</div>
			
		<script type="text/javascript">
		 devicesAction= #{jsAction @@Application.devices(':id') /};	
		
			$("#load").click(function(e){
				e.preventDefault();
				
				var deviceId=$("input[name='id']").val();
				alert("getting device with id= "+deviceId);
				
				// jQuery load method - insert response into #result element
				$("#result").load(
						devicesAction({id:deviceId})		
				);	
			});
			
			$("#get").click(function(e){
				e.preventDefault();
				var deviceId=$("#deviceId").val();
				$.get(devicesAction({id:deviceId}),
						function(data){
					//parse xml with jQuery , Chrome debugger is very useful ( watch expresseion )
					var resultDevice=$(data).find("device");
					$("#parsedXML").text("");
					$("#parsedXML").append("<p>"+"id:"+$(resultDevice.get(0)).attr("id")+"</p>");
					$("#parsedXML").append("<p>"+"name:"+$(resultDevice.get(0)).attr("name")+"</p>");
					$("#parsedXML").append("<p>"+"details:"+$(resultDevice.get(0)).text()+"</p>");
					
				});
			});
		</script>	
--------------------------------------------------------------------------------------------------------------------
2)	Using jQuery with the jsRoute tag

	To have more control on the generated route, you also have the jsRoute tag, 
	which is similar to the #{jsAction /} tag but it returns an object 
	containing both the function which consctructs the URL based on the server action,
	and the corresponding HTTP method (GET, POST, etc.).

	Example:

		PUT     /users/{id}        Users.update
	Then, in a template:

		<script type="text/javascript">
		    var updateUserRoute = #{jsRoute @Users.update(':id') /}
		    $.ajax({
		      url: updateUserRoute.url({id: userId}),
		      type: updateUserRoute.method,
		      data: 'user.name=Guillaume'
    		     });
		</script>
	
	With this approach, you won't have to update your templates in case you
	decide to change the HTTP method in the routes file.
---------------------------------------------------------------------------------------------------------------

