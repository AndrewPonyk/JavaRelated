1)	Tell something about play templating system ?

	Play has an efficient templating system which allows to dynamically generate HTML, XML, JSON or any text-based formatted document. 
	The 		template engine uses Groovy as an expression language. A tag system allows you to create reusable functions.

	Templates are stored in the <b> app/views </b> directory.

	A template file is a text file, some parts of which have placeholders for <b>dynamically generated content</b>. 
	The template’s dynamic 	  elements are written using the Groovy language. Groovy’s syntax is very close to Java’s.
-------------------------------------------------------------------------

2) Template syntax ?

	A template file is a text file, some parts of which have placeholders for dynamically generated content.
	The template’s dynamic elements are written using the Groovy language. Groovy’s syntax is very close to Java’s.
	
	Dynamic elements are resolved during template execution. The rendered result is then sent as part of the HTTP response.
	
	!Expressions:  <b> ${…} </b>
		for example we have index.html
			inside ${10+30} - display '40' (dynamically executes )
		----
		next example display username on page
		public static void index() {
			//User user=new User();
			//user.name="Ivan";
	
			render(user);
		}
		....
		index.html:
		${user.name} - display user name
		
		if user == null 
		 and we will call on the page : ${user.name} - we will have exception
		 
		 to prevent nullpointer exception we can do ${user?.name} - if user will be null ,  there will be no exception
		 
-------------------------------------------------------------------------------------------------------------------	 
3)  Template decorators : #{extends /} and #{doLayout /}

	Decorators provide a clean solution to share a page layout (or design) across several templates.
	
	Example  we have  template main.html , and want to extend it 
		/app/views/main.html:
			<!DOCTYPE html>
			<html>
				<head>
					<title>#{get 'title' /}</title>
					<meta charset="${_response_encoding}">
					<link rel="stylesheet" media="screen" href="@{'/public/stylesheets/main.css'}">
					#{get 'moreStyles' /}
					<link rel="shortcut icon" type="image/png" href="@{'/public/images/favicon.png'}">
					<script src="@{'/public/javascripts/jquery-1.6.4.min.js'}" type="text/javascript" charset="${_response_encoding}"></script>
					#{get 'moreScripts' /}
				</head>
				<body>
					<h4>4 Template Engline (page name : #{get 'pagename' /})</h4>
					<hr>
					#{doLayout /}
				</body>
			</html>
			
			and file /app/views/Application/index.html (we put content using #{extends 'main.html' /}
				#{extends 'main.html' /}
				#{set title:'Template engine' /}

				#{set pagename:'index.html' /}


				${108+25} - display 133<br>
				${user?.name} - display user name
						
						
						
		<b>!!!!! se #{get} and #{set} tags to share variables between the template and the decorator.					</b>
						#{set title:'Template engine' /}
						#{get 'title' /}
-----------------------------------------------------------------------------------------------------------------
4) 	 Tags .

		<b> #{tagName /} </b> - tag invokation

		A tag is a template fragment that can be called with parameters. If the tag has only one parameter, by convention it is called <b> “arg” </b> and its name can be omitted.
		
		A tag has to be closed, either directly or by an end tag:
		#{script 'jquery.js' /}

		or
		
		#{script 'jquery.js'}#{/script}
		
	EEEEEEEEEEEEExample :::::::::::::::::::: (iteration on the page)
		<ul>
			#{list items:client.accounts, as:'account' }
				<li>${account}</li>
			#{/list}
		</ul>
		
		
------------------------------------------------------------------------------------------------------------------

5) 		Actions: @{…} or @@{…}

	You can use the Router to (reverse) generate a URL corresponding to a specified route. From a template you can use the special @{…} syntax to do that.
	Example : 
	<a href="@{Clients.index()}">Back</a>
	
	! The @@{…} syntax does the same but generates an <b> absolute </b> URL (notably useful for e-mail).
	
-------------------------------------------------------------------------------------------------------------------------
6) 		Messages: &{…}

	If your application needs <b> internationalization  </b> you can use the &{…} syntax to display an internationalized message:
	
	For example in the files conf/messages we specify:
		lientName=The client name is %s
		<h1>&{'clientName', client.name}</h1>
		
----------------------------------------------------------------------
7)  Messages: &{…} Internationalization : (look chapter 12 for details)
		
		Play framework 1 uses 'Accept-Language' header to define Language
		
		uk - is Ukrainian language (so Ukrainian messages will be in file conf/messages.uk)
		en-US - is English (so English messages will be in file conf/messages ) 
		
		Here overview of i118n
		
		To get started, first edit conf/application.conf and uncomment (in the default configuration file) or add a line with three supported languages: 
		# Localisations for English, Dutch and French. 
		application.langs=en,nl,fr
	
		then create file messages, messages.nl, messages.fr
		(and play will choose language )
		
		so it is easy =)
		
		!!!!!! If we want we can change language  as :     <b> Lang.change("ja"); </b>
--------------------------------------------------------------------------------------------------------
8)	Comment: *{…}*

		Comments aren’t evaluated by the template engine. They are just comments…
		*{**** Display the user name ****}*
		<div class="name">
			${user.name}
		</div>		
---------------------------------------------------------------------------------------------------------------
9)		Scripts: %{…}%
		
		A script is a more complicated set of expressions. A script can declare some variables and define some statements.
		
		Example : 	%{
						fullName = client.name.toUpperCase()+' '+client.forname;
					}%
					
		
		

		A script can write dynamic content directly using the out object:
		%{
		   fullName = client.name.toUpperCase()+' '+client.forname;
		   out.print('<h1>'+fullName+'</h1>');
		}%
		
		You can use a script to create a structure such as an iteration in your template:
			<h1>Client ${client.name}</h1>
			<ul>
			%{
				 for(account in client.accounts) {  // something interesting it is not Java =)
			}%
				 <li>${account}</li>
			%{
				 }
			}%
			</ul>
			
-----------------------------------------------------------------------------------------------------
10) Template inheritance

	A template can inherit another template, i.e. it can be included as a part of an other template.
	
	To inherit another template, use the <b>extends</b> tag:
	#{extends 'main.html' /}
	 
	<h1>Some code</h1>
	
	
		The main.html template is a standard template, but it uses the doLayout tag to include the content:
		<h1>Main template</h1>
		 
		<div id="content">
			#{doLayout /}
		</div>

--------------------------------------------------------------------------------------------------------------------------		

11) Custom template TAGS

		You can easily create specific tags for your application. 
		A tag is a simple template file, stored in the <b> app/views/tags </b> directory. The template’s file name is used as the tag name.


		simple hello world tag : * create file hello.tag , in /app/views/tags
								 * in file write 'Hello world'
								 * invoke hello world tag on page : #{hello /}
								 
								 
		Pass parameter to tag : * create file greeting.tag , in /app/views/tags with content
										<span>
											Hello , ${_name} !
										</span>
								* on the page invoke 
										#{greeting name:'Ivan' /}
										

										
	Invoke tag body

	If your tag supports a body, you can include it at any point in the tag code, using the doBody tag.

	For example:
	Hello #{doBody /}!

	And you can then pass the name as tag body:
	#{hello}
	   Bob
	#{/hello}									
--------------------------------------------------------------------------------------------------------------------
12)	Custom Java tags



	You can also define custom tags in Java code.
	Similarly to how JavaExtensions work by extending the play.templates.JavaExtensions class, to create a FastTag you need 
	to create a method in a class that extends play.templates.FastTags. Each method that you want to execute as a tag must have the following method signature.
 
	<b>public static void _tagName(Map<?, ?> args, Closure body, PrintWriter out, ExecutableTemplate template, int fromLine) </b>
	
	
---------------------------------------------------------------------------------------------------------
13) Java object extensions in templates

	When you use your Java object within the template engine, new methods are added to it. These methods don’t exist in the original Java class and are dynamically added by the template engine.

		For example, to allow easy number formatting in a template, a format method is added to java.lang.Number.

		It’s then very easy to format a number:
		<ul>
		#{list items:products, as:'product'}
			<li>${product.name}. Price: ${product.price.format('## ###,00')} €</li>
		#{/list}
		</ul>
		
		
		Example : 'Create extension to show money values'
		
			package JavaExtensions;

			import groovy.lang.Closure;
			import java.io.PrintWriter;
			import java.util.Map;

			import play.Play;
			import play.templates.JavaExtensions;
			import play.templates.GroovyTemplate.ExecutableTemplate;

			public class MyJavaExtension  extends  JavaExtensions{
				
				public static String ccyAccount(Number number, String currencyName){
					return "Sum: " + number+"  "+currencyName;
				}
			}
		
		And on the page we write :
		${100.ccyAccount("dolars")}
		
		Output will be : 'Sum 100 dolars '
		
		
		P.S
		Template extension classes are automatically detected by Play at start-up. You just have to restart your application to make them available.
---------------------------------------------------------------------------------------------------------
		
14 )		Implicit objects available in a template

		All objects added to the renderArgs scope are directly injected as template variables. 

		For instance, to inject a ‘user’ bean into the template from a controller:
		renderArgs.put("user", user );
		
		---
		When you render a template from an action, the framework also adds implicit objects:
		
		errors				Validation errors				http://www.playframework.com/@api/play/data/validation/Validation.html#errors()
		flash 				Flash scope						http://www.playframework.com/@api/play/mvc/Scope.Flash.html
		lang 				The current language			http://www.playframework.com/@api/play/i18n/Lang.html
		messages 			The messages map				http://www.playframework.com/@api/play/i18n/Messages.html
		out 				The output stream writer		java.io.PrintWriter
		params 				Current parameters
		play 				Main framework class 			play.Play
		request 			The current HTTP request		http://www.playframework.com/@api/play/mvc/Http.Request.html
		session 			Session scope
		
		
		
		
		In addition to the list above the names owner, delegate and it are reserved in Groovy and shouldn’t be used as variable names in templates.
---------------------------------------------------------------------------------
15) Play framework : how to use “moreStyles” and “moreScripts”  ?
			
			In the file main.html, in default project created by Play!, there's this line :
			#{get 'moreStyles' /}

			I understand that if I need to add more styles, in my view script, I have to use
			#{set tag:'value' /}

			where tag should be moreStyles, but it seems worng to set the value to the full HTML <link> tag. And what happens if the view needs to add more styles, or scripts?

			Answer :
				you set more styles with:
				#{set 'moreStyles'}
						#{stylesheet 'main.css' /}
				#{/set}

				like scripts:
				#{set 'moreScripts'}
					#{script 'base64.js'/}
				#{/set}
	
				or #
				{set 'moreStyles'}
						<link rel="stylesheet" type="text/css" media="screen" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.14/themes/ui-lightness/jquery-ui.css" charset="${_response_encoding}"/>
				#{/set} 
				
----------------------------------------------------------------------------------