chapter 4 'Java variables':
package ch2;

/**
 * Created by andrii on 17.04.17.
 */
public class Main {
    public static void main(String[] args) {

        long l = 9000000000L; // without L we got error 'value is out of range'

        double d = 1.23;
        float ff = 1.23F;
        System.out.println(d == ff); // false

        double d2 = 1.23;
        System.out.println(d==d2); // true

        double d3 = 2.46/2;
        System.out.println(d3 == d2);//true
        
        int i3 = 100;
        int i4 = 7;
        int i5 = i3%i4;
        System.out.println(i5);//2
    }
--------------------------------------------------------------------------------------------------------
5
Control Flow

package ch5flow;

import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		System.out.println("Flow");
		int[] j = { 11, 22, 33, 44 };
		
		// --------- for
		for (int i = 0; i < j.length; i++) {
			System.out.println("Value at position:" + i + ", is: " + j[i]);
		}
		
		// --------- while
		// ...

		// switch
		// note: only constants( final or literals) can be  in case statement
		Integer i = new Scanner(System.in).nextInt();

		switch (i){
			case 1:
				System.out.println("I=1");
				break;
			case 10:
				System.out.println("I=10");
				break;
			default:
				System.out.println("Default val");
		}

		// Java 8 switch changes
		// 1) Allow String in switch
		// 2) Allow wrappers in switch
		//Character, Byte, Short, and Integer , !!! NOT Long

	}
}
------------------------------------------------------------------------------------------
6
Comparing Strings

package ch6CompareStrings;

import java.util.Scanner;

/**
 * Created by andrii on 22.04.17.
 */
//https://www.oreilly.com/learning/java7-features interesting
public class Main {
    public static void main(String[] args) {
        //compare String with null
        System.out.println("hello".equals(null)); // false
     
        // 
        String myName = "Matt Joh";
        String yourName = "Matt Gqa";
        String myFirstName = myName.substring(0, 4);
        String yourFirstName = yourName.substring(0, 4);
        
        System.out.println(myFirstName == yourFirstName); // it is false because substring uses new String(), and 
        // returned objects are not in string pool
        
        System.out.println(myFirstName.intern() == yourFirstName.intern()); // true, intern() method interning stings, ensure that value will be in string pool
        
        
        
        // String in switch
        String val = new Scanner(System.in).nextLine();
        switch (val) {
		case "1":
			System.out.println("You print 1");
			break;
		case "2":
			System.out.println("You print 2");
			
		default:
			System.out.println("You print something else");
			break;
		}
    }
}
-------------------------------------------------------------------------------------------------
7 Object orientation

package ch7ObjectOrientation;

public class NameManager {
	private String myName;

	public String getFirstName() {
		int spacePosition = myName.indexOf(" ");
		return myName.substring(0, spacePosition);
	}

	public String getSurname() {
		int spacePosition = myName.indexOf(" ");
		return myName.substring(spacePosition + 1);
	}

	public void setName(String newName) {
		myName = newName;
	}

}


package ch7ObjectOrientation;

public class Main {
	public static void main(String[] args) {
		NameManager simonManager = new NameManager();
		NameManager joanneManager = new NameManager();

		simonManager.setName("Simon Pieman");
		joanneManager.setName("Joanne Smith");

		System.out.println(simonManager.getFirstName());
		System.out.println(joanneManager.getSurname());
	}
}

----------------------------------------------------------------------------------------
8 Writing classes
package ch8WritingClasses;

/**
 * Created by andrii on 22.04.17.
 */
public class Main {
    public static void main(String[] args) {
        Customer simon = new Customer("Mr", "Simon", "Pieman", "Lviv", "09823", "ivan@ukr.net", 1, GenderType.MALE);

        System.out.println(simon.getFirstName());
        System.out.println(simon.getMailingName());
        System.out.println(simon.getGender());
    }
}


package ch8WritingClasses;

/**
 * Created by andrii on 22.04.17.
 */
public enum GenderType {
    MALE, FEMALE, UNKNOWN;
}

package ch8WritingClasses;

public class Customer {

    private String title;
    private String firstName;
    private String surname;
    private String address;
    private String phoneNumber;
    private String email;
    private int customerNumber;
    private GenderType gender;
    private boolean isvalid;

    public Customer(String title, String firstName, String surname, String address,
                    String phoneNumber, String email, int customerNumber, GenderType gender) {

        setName(title, firstName, surname);
        this.address = address;
        this.phoneNumber=phoneNumber;
        this.email = email;
        this.customerNumber = customerNumber;
        this.gender = gender;
        this.isvalid = true;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getSurname() {
        return surname;
    }

    private void setName(String title, String firstName, String surname) {
        this.title = title;
        this.firstName = firstName;
        this.surname = surname;
    }

    public String getMailingName() {
        String mailingName;
        mailingName = title + " " + firstName.substring(0,1)
                + " " + surname;
        return mailingName;
    }

    public GenderType getGender() {
        return gender;
    }

}
------------------------------------------------------------------
9 Practical Session 1
An in-depth practical - in this session we create our second class, and see more on manipulating strings and overloading

package ch9PracticalSession1;


public class Book {

    private int bookID;
    private String title;
    private String author;
    private String isbn;

    public Book(int bookID, String title, String author, String isbn)
    {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isbn = isbn;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public int getBookID() {
        return bookID;
    }
}


package ch9PracticalSession1;

/**
 * Created by andrii on 23.04.17.
 */

public class UI {

    public void printHeader() {
        System.out.println("BookID  Title                 Author");
    }

    public void printBook(Book book) {
        System.out.println(fixLengthString(book.getBookID(),6) + "  " + fixLengthString(book.getTitle(),20) +
                "  " + fixLengthString(book.getAuthor(),20));
    }

    private String fixLengthString(String start, int length) {
        if (start.length() >= length) {
            return start.substring(0,length);
        }
        return String.format("%-" + length + "s", start);
    }

    private String fixLengthString(int start, int length) {
        String startString = String.valueOf(start);
        return fixLengthString(startString, length);
    }

}

package ch9PracticalSession1;

/**
 * Created by andrii on 22.04.17.
 */
public class Main {
    public static void main(String[] args) {
        Book book1 = new Book(1,"An introduction to Java","Matt Greencroft","12345");
        Book book2 = new Book(2,"Better Java","Joe Le Blanc","23456");

        UI ui = new UI();
        ui.printHeader();
        ui.printBook(book1);
        ui.printBook(book2);

    }
}
--------------------------------------------------------------------------
10 Arrays

package ch10ArrayOfObjects;

/**
 * Created by andrii on 22.04.17.
 */
public class Main {
    public static void main(String[] args) {
        BookCatalog bookCatalog = new BookCatalog();

        Book book1 = new Book(1,"An introduction to Java","Matt Greencroft","12345");
        Book book2 = new Book(2,"Better Java","Joe Le Blanc","23456");

        bookCatalog.addBook(book1);
        bookCatalog.addBook(book2);


        UI ui = new UI();
        ui.printHeader();
        ui.printBookCatalog(bookCatalog.getBookArray());

        Book foundBook = bookCatalog.findBook("Better java");
        if (foundBook !=null) {
            System.out.println(foundBook.getTitle());
        }


    }
}


package ch10ArrayOfObjects;


public class Book {

    private int bookID;
    private String title;
    private String author;
    private String isbn;

    public Book(int bookID, String title, String author, String isbn)
    {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isbn = isbn;
    }

    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public int getBookID() {
        return bookID;
    }
}


package ch10ArrayOfObjects;

/**
 * Created by andrii on 23.04.17.
 */
public class BookCatalog {
    private Book[] bookArray = new Book[100];
    private int nextPosition = 0;

    public Book[] getBookArray() {
        return bookArray;
    }

    public void addBook(Book newBook) {
        bookArray[nextPosition] = newBook;
        nextPosition++;
    }

    public Book findBook(String title)
    {
        for (int counter = 0; counter < nextPosition; counter++) {
            if (bookArray[counter].getTitle().equalsIgnoreCase((title))) {
                return bookArray[counter];
            }
        }
        return null;
    }

}


package ch10ArrayOfObjects;

/**
 * Created by andrii on 23.04.17.
 */

public class UI {

    public void printHeader() {
        System.out.println("BookID  Title                 Author");
    }

    public void printBook(Book book) {
        System.out.println(fixLengthString(book.getBookID(),6) + "  " + fixLengthString(book.getTitle(),20) +
                "  " + fixLengthString(book.getAuthor(),20));
    }

    private String fixLengthString(String start, int length) {
        if (start.length() >= length) {
            return start.substring(0,length);
        }
        return String.format("%-" + length + "s", start);
    }

    private String fixLengthString(int start, int length) {
        String startString = String.valueOf(start);
        return fixLengthString(startString, length);
    }

    public void printBookCatalog(Book[] bookCatalog) {
        for (int counter = 0; counter <bookCatalog.length; counter++ )
        {
            if (bookCatalog[counter] != null) {
                printBook(bookCatalog[counter]);
            }
        }
    }

}


!!! Varargs example
package ch10ArrayOfObjects;

/**
 * Created by andrii on 23.04.17.
 */
public class VarargsExample {

    public static void main(String[] args) {
        foo(1); // "int i"
        //foo(1,1); //Ambuguous, "int ... i" and "int i, int... j"
    }


    public static void foo(int i){
        System.out.println("int i");
    }

    public static void foo(int ... i){
        System.out.println("int ... i");
    }

    public static void foo(int i, int... j){
        System.out.println(j.length);
        System.out.println("int i, int... j");
    }
}

---------------------------------------------------------------------
11 Packages

Nothing, really nothing interesting here
---------------------------------------------------------------------
12 Java library (only Date and GregorialCalendar classes were considered=))
package ch12JavaLibrary;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

/**
 * Created by andrii on 27.04.17.
 */
public class Main {

    public static void main(String[] args) {
        // use Java 7 dates and calendar

        Date today = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("MMM -- d -- Y ");
        System.out.println(sdf.format(today)); // Apr -- 27 -- 2017
        //https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#month

        //https://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html
        GregorianCalendar gCal = new GregorianCalendar(2017, 03, 27); // apr 27 2017
        System.out.println(gCal.getTime());
        gCal.add(Calendar.WEEK_OF_MONTH, 2);
        System.out.println(gCal.getTime()); // 11 may


    }
}
--------------------------------------------------------------------
13 Java library: handling numbers

package ch13HandlingNumbers;

import java.text.NumberFormat;
import java.util.Locale;

/**
 * Created by andrii on 27.04.17.
 */
public class Main {
    public static void main(String[] args) {
        double d = 1;

        NumberFormat nf = NumberFormat.getCurrencyInstance();
        nf.setMinimumFractionDigits(5);
        nf.setMaximumFractionDigits(5);
        System.out.println(nf.format(d));

        double dd = 0.5;
        nf = NumberFormat.getInstance();
        nf.setMinimumIntegerDigits(0);
        System.out.println(nf.format(dd)); // works like Oracle varchar 0.5 -> '.5'

        // Language - ISO 639, Country - ISO 3166
        //https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html
        Locale ukraine = new Locale("uk", "UA");
        nf = NumberFormat.getCurrencyInstance(ukraine);
        System.out.println(nf.format(dd)); // 0.5 грн


        // DOUBLE magic))
        double one = 1d;
        for (int i = 0; i < 10; i++) {
            one += 0.1;
            System.out.println(one); // 1.1 1.2000000000000002 1.3000000000000003 ....
        }
    }
}

----------------------------------------------------------------------------------------
14 Handling Garbage (but in this lesson only StringBuilder is demontrated, and only general concepts of GC)

In Customer.java we have
	public String getMailingName() {
		StringBuilder sb = new StringBuilder(title);
		sb.append(" ");
		sb.append(firstName.substring(0,1));
		sb.append(" ");
		sb.append(surname);
		
		return sb.toString(); 
	}

Instead of older version
    
    public String getMailingName() {
        String mailingName;
        mailingName = title + " " + firstName.substring(0,1)
                + " " + surname;
        return mailingName;
    }

----------------------------------------------------------------------------------------
15 Inheritance
// Create Material class which is baseclass for Book and DVD



package ch15Inheritance.models;

public class Material {

	private int id;
	private String title;
	private String branch;
	
	public Material(int id, String title, String branch) {
		this.id = id;
		this.title = title;
		this.branch = branch;
	}

	public String getTitle() {
		return title;
	}
	
	public int getID() {
		return id;
	}
	
	public void relocate (String newBranch) {
		this.branch = newBranch;
	}
	
	public boolean lend(Customer customer) {
		return true;
	}
	
}


package ch15Inheritance.models;

public class Book extends Material {

	private String author;
	private String isbn;
	private int noOfPages;
	
	public Book(int id, String title, String author, String isbn, String branch, int noOfpages) 
	{
		super(id,title,branch);
		this.author = author;
		this.isbn = isbn;
		this.noOfPages= noOfpages;
	}
	
	public String getAuthor() {
		return author;
	}

	public String getIsbn() {
		return isbn;
	}

	public void sendForRepair() {
		System.out.println("Book has been sent for repair");
	}
	
}


package ch15Inheritance.models;

public class DVD extends Material {

	private String director;
	private String catalogNo;
	private int runningTime;
	private boolean licenced;
	
	public DVD(int id, String title, String branch, String director,
			String catalogNo, int runningTime) {
		super(id, title, branch);
		this.director = director;
		this.catalogNo = catalogNo;
		this.runningTime = runningTime;
		licenced = false;
	}
	
	public void licence() {
		licenced = true;
	}
	
}

-----------------------------------------------------------------------------
ch 16 Abstract and override

// changes:
// 1) Change Material to 'abstract'
// 2) Add customer to Material
// 



package ch16OverrideAndAbstract.models;

public abstract class Material {

	private int id;
	private String title;
	private String branch;
	private Customer borrower;
	
	public Material(int id, String title, String branch) {
		this.id = id;
		this.title = title;
		this.branch = branch;
	}

	public String getTitle() {
		return title;
	}
	
	public int getID() {
		return id;
	}
	
	public void relocate (String newBranch) {
		this.branch = newBranch;
	}
	
	public boolean lend(Customer customer) {
		if (borrower == null) {
			borrower = customer;
			return true;
		}
		else {
			return false;
		}
		
	}
	
	//must be overridden
	public abstract int getLoanPeriod();
	
}



//And book and dvd classes

package ch16OverrideAndAbstract.models;

public class Book extends Material {

	private String author;
	private String isbn;
	private int noOfPages;
	
	public Book(int id, String title, String author, String isbn, String branch, int noOfpages) 
	{
		super(id,title,branch);
		this.author = author;
		this.isbn = isbn;
		this.noOfPages= noOfpages;
	}
	
	public String getAuthor() {
		return author;
	}

	public String getIsbn() {
		return isbn;
	}

	public void sendForRepair() {
		System.out.println("Book has been sent for repair");
	}

	@Override
	public int getLoanPeriod() {
		return 21;
	}
}



//
package ch16OverrideAndAbstract.models;

public class DVD extends Material {

	private String director;
	private String catalogNo;
	private int runningTime;
	private boolean licenced;
	
	public DVD(int id, String title, String branch, String director,
			String catalogNo, int runningTime) {
		super(id, title, branch);
		this.director = director;
		this.catalogNo = catalogNo;
		this.runningTime = runningTime;
		licenced = false;
	}
	
	public void licence() {
		licenced = true;
	}

	@Override
	public boolean lend(Customer customer) {
		if(licenced) {
			return super.lend(customer);
		}
		else {
			return false;
		}
	}

	@Override
	public int getLoanPeriod() {
		return 7;
	}
}


package ch16OverrideAndAbstract.ui;
import ch16OverrideAndAbstract.models.Book;
import ch16OverrideAndAbstract.models.BookCatalog;
import ch16OverrideAndAbstract.models.Customer;
import ch16OverrideAndAbstract.models.DVD;
import ch16OverrideAndAbstract.utilities.GenderType;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.Locale;


public class Main {

	public static void main(String[] args) {
		
		BookCatalog bookCatalog = new BookCatalog();
		
		Book book1 = new Book(1,"An introduction to Java","Matt Greencroft","12345","Anytown Branch", 400);
		Book book2 = new Book(2,"Better Java","Joe Le Blanc","23456","Anytown Branch",150);
		DVD dvd1 = new DVD(3,"An Epic Film About Java","Anytown Branch","Stephen Spielberg","99887",120);
		
		System.out.println(dvd1.getTitle());
		book1.relocate("MyCity branch");
		
		
		bookCatalog.addBook(book1);
		bookCatalog.addBook(book2);


		UI ui = new UI();
		ui.printHeader();
		ui.printBookCatalog(bookCatalog.getBookArray());
		
		Book foundBook = bookCatalog.findBook("Better java");
		if (foundBook !=null) {
			System.out.println(foundBook.getTitle());
		}
		
		Customer customer = new Customer("Mr", "Michael", "Smith", "1 The High Street","1234","a@b.com",1, GenderType.MALE);
		System.out.println(customer.getExpiryDate());
		System.out.println(customer.getMailingName());
		
		System.out.println(dvd1.lend(customer));
		dvd1.licence();
		System.out.println(dvd1.lend(customer));
		System.out.println(dvd1.lend(customer));
		
		System.out.println(book1.lend(customer));
		System.out.println(book1.lend(customer));
		
		System.out.println(book1.getLoanPeriod());
		System.out.println(dvd1.getLoanPeriod());
	}

}

------------------------------------------------------------------------------------
ch17 equals and ToString
// in this lesson we use general Eclipse generated code for Customer
// and for DVD and Book classes we use equals from their parent: Material class

package ch17toStringAndequals.models;

public abstract class Material {

	private int id;
	private String title;
	private String branch;
	private Customer borrower;
	
	public Material(int id, String title, String branch) {
		this.id = id;
		this.title = title;
		this.branch = branch;
	}

	public String getTitle() {
		return title;
	}
	
	public int getID() {
		return id;
	}
	
	public void relocate (String newBranch) {
		this.branch = newBranch;
	}
	
	public boolean lend(Customer customer) {
		if (borrower == null) {
			borrower = customer;
			return true;
		}
		else {
			return false;
		}
	}
	
	//must be overridden
	public abstract int getLoanPeriod();
	
	@Override
	public String toString() {
		return title;
	}

	//
	@Override
	public boolean equals(Object obj) {
		if (obj == null || getClass() != obj.getClass()) {
			return false;
		}

		Material otherClass = (Material) obj;
		if (id == otherClass.id) {
			return true;
		} else {
			return false;
		}
	}

}



// equals generated by Eclipse
package ch17toStringAndequals.models;
import ch17toStringAndequals.utilities.GenderType;

import java.util.Date;
import java.util.GregorianCalendar;



public class Customer {

	private String title;
	private String firstName;
	private String surname;
	private String address;
	private String phoneNumber;
	private String email;
	private int customerNumber;
	private GenderType gender;
	private boolean isvalid;
	private Date expiryDate;

	public Customer(String title, String firstName, String surname, String address,
			String phoneNumber, String email, int customerNumber, GenderType gender) {

		setName(title, firstName, surname);
		this.address = address;
		this.phoneNumber=phoneNumber;
		this.email = email;
		this.customerNumber = customerNumber;
		this.gender = gender;
		this.isvalid = true;
		GregorianCalendar gCal = new GregorianCalendar();
		gCal.add(GregorianCalendar.YEAR, 1);
		this.expiryDate = gCal.getTime();
	}
	
	public String getFirstName() {
		return firstName;
	}
	
	public String getSurname() {
		return surname;
	}
	public void setSurname(String surname) {
		this.surname = surname;
	}
	
	private void setName(String title, String firstName, String surname) {
		this.title = title;
		this.firstName = firstName;
		this.surname = surname;
	}
	
	public String getMailingName() {
		StringBuilder sb = new StringBuilder(title);
		sb.append(" ");
		sb.append(firstName.substring(0,1));
		sb.append(" ");
		sb.append(surname);
		
		return sb.toString(); 
	}
	
	public GenderType getGender() {
		return gender;
	}

	public Date getExpiryDate() {
		return expiryDate;
	}

	@Override
	public String toString() {
		return getMailingName();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((address == null) ? 0 : address.hashCode());
		result = prime * result + customerNumber;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result
				+ ((expiryDate == null) ? 0 : expiryDate.hashCode());
		result = prime * result
				+ ((firstName == null) ? 0 : firstName.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + (isvalid ? 1231 : 1237);
		result = prime * result
				+ ((phoneNumber == null) ? 0 : phoneNumber.hashCode());
		result = prime * result + ((surname == null) ? 0 : surname.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Customer other = (Customer) obj;
		if (address == null) {
			if (other.address != null)
				return false;
		} else if (!address.equals(other.address))
			return false;
		if (customerNumber != other.customerNumber)
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (expiryDate == null) {
			if (other.expiryDate != null)
				return false;
		} else if (!expiryDate.equals(other.expiryDate))
			return false;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		if (gender != other.gender)
			return false;
		if (isvalid != other.isvalid)
			return false;
		if (phoneNumber == null) {
			if (other.phoneNumber != null)
				return false;
		} else if (!phoneNumber.equals(other.phoneNumber))
			return false;
		if (surname == null) {
			if (other.surname != null)
				return false;
		} else if (!surname.equals(other.surname))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}


}

----------------------------------------------------------------------------
chapter 18 Exceptions
// Author break rules (my opinion), and give a "bad" lesson:
// He throws checked exception from 'findBook' method. (better solution is return null)
//http://stackoverflow.com/questions/175532/should-a-retrieval-method-return-null-or-throw-an-exception-when-it-cant-prod
//
If you are always expecting to find a value then throw the exception if it is missing. The exception would mean that there was a problem.
If the value can be missing or present and both are valid for the application logic then return a null.
//

package ch18Exceptions.models;

public class BookNotFoundException extends Exception {

	private static final long serialVersionUID = 1L;

}

package ch18Exceptions.models;


public class BookCatalog {

	private Book[] bookArray = new Book[100];
	private int nextPosition = 0;

	public Book[] getBookArray() {
		return bookArray;
	}
	
	public void addBook(Book newBook) {
		bookArray[nextPosition] = newBook;
		nextPosition++;
	}
	
	public Book findBook(String title) throws BookNotFoundException
	{
		for (int counter = 0; counter < nextPosition; counter++) {
			if (bookArray[counter].getTitle().equalsIgnoreCase((title))) {
				return bookArray[counter];
			}
		}
		throw new BookNotFoundException();
	}

}


package ch18Exceptions.ui;

import ch18Exceptions.models.*;
import ch18Exceptions.utilities.GenderType;

public class Main {

	public static void main(String[] args) {

		BookCatalog bookCatalog = new BookCatalog();

		Book book1 = new Book(1,"An introduction to Java","Matt Greencroft","12345","Anytown Branch", 400);
		Book book2 = new Book(2,"Better Java","Joe Le Blanc","23456","Anytown Branch",150);
		DVD dvd1 = new DVD(3,"An Epic Film About Java","Anytown Branch","Stephen Spielberg","99887",120);
		DVD dvd2 = new DVD(3,"An Epic Film About Java","Anytown Branch","Stephen Spielberg","99887",120);

		System.out.println(dvd1.getTitle());
		book1.relocate("MyCity branch");


		bookCatalog.addBook(book1);
		bookCatalog.addBook(book2);


		UI ui = new UI();
		ui.printHeader();
		ui.printBookCatalog(bookCatalog.getBookArray());

		try {
			Book foundBook = bookCatalog.findBook("Better");
			System.out.println("We found " + foundBook.getTitle());
		}
		catch (BookNotFoundException e) {
			System.out.println("The book wasn't found");
		}

		int myTest = 1;

		try {
			if (myTest != 2) {
				throw new RuntimeException("Something went wrong");
			}
		}
		catch (RuntimeException e) {
			// do nothing here so that we can continue;
		}
		
		Customer customer = new Customer("Mr", "Michael", "Smith", "1 The High Street","1234","a@b.com",1, GenderType.MALE);
		System.out.println(customer.getExpiryDate());
		System.out.println(customer.getMailingName());

		System.out.println(customer);
		System.out.println(dvd1);

		System.out.println(dvd1.equals(dvd2));
		System.out.println(customer.equals(customer));

	}

}



----------------------------------------------------------------------------------------------
ch 19 Practicall session
// added LoanRegistry - which is like library registry (loan contains bookid, starend, duedate, customer)

package ch19PracticalSessionLoanRegistry.models;

import ch19PracticalSessionLoanRegistry.utilities.LoanStatus;

import java.util.Date;
import java.util.GregorianCalendar;


public class Loan {

	private int ID;
	private Customer customer;
	private Book book;
	private Date startDate;
	private Date dueDate;
	private Date returnDate;
	private LoanStatus status;
	
	public Loan(int iD, Customer customer, Book book) {
		super();
		ID = iD;
		this.customer = customer;
		this.book = book;
		startDate = new Date();
		
		GregorianCalendar gCal = new GregorianCalendar();
		gCal.add(GregorianCalendar.DAY_OF_MONTH,14);
		dueDate = gCal.getTime();
		
		status = LoanStatus.CURRENT;
	}

	@Override
	public String toString() {
		return "Loan [ID=" + ID + ", customer=" + customer.getMailingName() + ", book=" + book.getTitle()
				+ "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ID;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Loan other = (Loan) obj;
		if (ID != other.ID)
			return false;
		return true;
	}

	public Customer getCustomer() {
		return customer;
	}

	public Book getBook() {
		return book;
	}

	public Date getDueDate() {
		return dueDate;
	}
	
	public LoanStatus getStatus() {
		return status;
	}

	public void endLoan() {
		returnDate = new Date();
		status = LoanStatus.HISTORIC;
	}
	
}



//
package ch19PracticalSessionLoanRegistry.models;


import ch19PracticalSessionLoanRegistry.utilities.LoanStatus;

public class LoansRegistry {

	private Loan[] registry;
	private int nextPosition;
	
	public LoansRegistry() {
		registry = new Loan[100];
		nextPosition = 0;
	}

	public void addLoan(Loan loan) throws LoanAlreadyExistsException {
		for (int i = 0; i < nextPosition; i++) {
			if (registry[i].equals(loan)) {
				throw new LoanAlreadyExistsException();
			}
		}
		registry[nextPosition] = loan;
		nextPosition++;
	}
	
	public Loan findLoan(int bookID) throws LoanNotFoundException {
		for (int i = 0; i < nextPosition; i++) {
			if (registry[i].getBook().getID() == bookID && registry[i].getStatus() == LoanStatus.CURRENT) {
				return registry[i];
			}
		}
		
		throw new LoanNotFoundException();
	}
	
	public boolean isBookOnLoan(int bookID) {
		
		try {
			Loan foundLoan = findLoan(bookID);
			return true;
		}
		catch (LoanNotFoundException e){
			return false;
		}
		
	}
	
}



package ch19PracticalSessionLoanRegistry.ui;

import ch19PracticalSessionLoanRegistry.models.*;
import ch19PracticalSessionLoanRegistry.utilities.GenderType;

public class Main {

	public static void main(String[] args) {

		BookCatalog bookCatalog = new BookCatalog();

		Book book1 = new Book(1,"An introduction to Java","Matt Greencroft","12345","Anytown Branch", 400);
		Book book2 = new Book(2,"Better Java","Joe Le Blanc","23456","Anytown Branch",150);
		DVD dvd1 = new DVD(3,"An Epic Film About Java","Anytown Branch","Stephen Spielberg","99887",120);
		DVD dvd2 = new DVD(3,"An Epic Film About Java","Anytown Branch","Stephen Spielberg","99887",120);

		System.out.println(dvd1.getTitle());
		book1.relocate("MyCity branch");


		bookCatalog.addBook(book1);
		bookCatalog.addBook(book2);


		UI ui = new UI();
		ui.printHeader();
		ui.printBookCatalog(bookCatalog.getBookArray());

		try {
			Book foundBook = bookCatalog.findBook("Better");
			System.out.println("We found " + foundBook.getTitle());
		}
		catch (BookNotFoundException e) {
			System.out.println("The book wasn't found");
		}

		int myTest = 1;

		try {
			if (myTest != 2) {
				throw new RuntimeException("Something went wrong");
			}
		}
		catch (RuntimeException e) {
			// do nothing here so that we can continue;
		}
		
		Customer customer = new Customer("Mr", "Michael", "Smith", "1 The High Street","1234","a@b.com",1, GenderType.MALE);
		System.out.println(customer.getExpiryDate());
		System.out.println(customer.getMailingName());

		System.out.println(customer);
		System.out.println(dvd1);

		System.out.println(dvd1.equals(dvd2));
		System.out.println(customer.equals(customer));
		
		Loan firstLoan = new Loan(1,customer,book1);
		System.out.println(firstLoan.getDueDate());
		System.out.println(firstLoan);
		
		LoansRegistry registry = new LoansRegistry();
		try {	
			registry.addLoan(firstLoan);
			System.out.println("addLoan worked");
			}
		catch (LoanAlreadyExistsException e) {
			System.out.println("addLoan failed");
		}
		
		try {	
			registry.addLoan(firstLoan);
			System.out.println("addLoan worked");
			}
		catch (LoanAlreadyExistsException e) {
			System.out.println("addLoan failed");
		}
		
		System.out.println(registry.isBookOnLoan(book1.getID()));
		firstLoan.endLoan();
		System.out.println(registry.isBookOnLoan(book1.getID()));
	}

}


----------------------------------------------------------------------------------------------------------
ch20 Unit testing


